name: CI

on:
  pull_request:
    branches:
      - main

jobs:
  flutter_test:
    name: Run flutter test and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: "17.x"
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"
      - run: flutter pub get
      - run: flutter analyze
      - run: flutter test

  build_ios:
    name: ðŸŽ‰ Build iOS app
    needs: ["flutter_test"]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: "17.x"
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"
      - run: flutter pub get
      - run: flutter clean
      - run: flutter build ios --release --no-codesign
      
      - name: Upload .ipa file
        uses: actions/upload-artifact@v4
        with:
          name: ios-app
          path: build/ios/iphoneos/*.app

  build_android:
    name: ðŸŽ‰ Build Android app
    needs: ["flutter_test"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: "17.x"
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"
      - run: flutter pub get
      - run: flutter clean
      - run: flutter build apk --release

      - name: Upload APK file
        uses: actions/upload-artifact@v4
        with:
          name: android-app
          path: build/app/outputs/flutter-apk/app-release.apk

  versioning:
    name: â­• Check and prefix release
    needs: [build_android, build_ios]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "::set-output name=version::$version"

      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ steps.extract_version.outputs.version }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ steps.extract_version.outputs.version }}-build-${{ github.run_number }}"
          echo "::set-output name=version::$new_version"

  create_release:
    needs: [versioning, build_android, build_ios]
    runs-on: ubuntu-latest
    steps:
      - name: Download iOS Artifact
        uses: actions/download-artifact@v2
        with:
          name: ios-app

      - name: Download Android Artifact
        uses: actions/download-artifact@v2
        with:
          name: android-app

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/flutter-apk/app-release.apk,ios-app/*.app"
          tag: v${{ needs.versioning.outputs.version }}
          token: ${{ secrets.TOKEN }}  # Secret token of GitHub account